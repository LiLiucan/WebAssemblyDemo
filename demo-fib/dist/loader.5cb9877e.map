{"version":3,"sources":["loader.js"],"names":["loadWebAssembly","filename","imports","fetch","then","response","arrayBuffer","WebAssembly","compile","buffer","env","Object","assign","memoryBase","tableBase","memory","Memory","initial","maximum","table","Table","element","Instance","module","loadJS","url","text","Function","code","exports","factory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAiD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC/C,SAAOC,MAAMF,QAAN,EACJG,IADI,CACC;AAAA,WAAYC,SAASC,WAAT,EAAZ;AAAA,GADD,EAEJF,IAFI,CAEC;AAAA,WAAUG,YAAYC,OAAZ,CAAoBC,MAApB,CAAV;AAAA,GAFD,EAGJL,IAHI,CAGC,kBAAU;AACdF,YAAQQ,GAAR,GAAcR,QAAQQ,GAAR,IAAe,EAA7B;AACAC,WAAOC,MAAP,CAAcV,QAAQQ,GAAtB,EAA2B;AACzBG,kBAAY,CADa;AAEzBC,iBAAW,CAFc;AAGzBC,cAAQ,IAAIR,YAAYS,MAAhB,CAAuB,EAAEC,SAAS,GAAX,EAAgBC,SAAS,GAAzB,EAAvB,CAHiB;AAIzBC,aAAO,IAAIZ,YAAYa,KAAhB,CAAsB,EAAEH,SAAS,CAAX,EAAcC,SAAS,CAAvB,EAA0BG,SAAS,SAAnC,EAAtB;AAJkB,KAA3B;AAMA,WAAO,IAAId,YAAYe,QAAhB,CAAyBC,MAAzB,EAAiCrB,OAAjC,CAAP;AACD,GAZI,CAAP;AAaD;;AAED,SAASsB,MAAT,CAAiBC,GAAjB,EAAoC;AAAA,MAAdvB,OAAc,uEAAJ,EAAI;;AAClC,SAAOC,MAAMsB,GAAN,EACJrB,IADI,CACC;AAAA,WAAYC,SAASqB,IAAT,EAAZ;AAAA,GADD,EAEJtB,IAFI,CAEC;AAAA,WAAQ,IAAIuB,QAAJ,CAAa,SAAb,eAAmCC,IAAnC,SAAR;AAAA,GAFD,EAGJxB,IAHI,CAGC;AAAA,WAAY,EAAEyB,SAASC,QAAQ5B,OAAR,CAAX,EAAZ;AAAA,GAHD,CAAP;AAID","file":"loader.5cb9877e.map","sourceRoot":"..","sourcesContent":["function loadWebAssembly(filename, imports = {}) {\n  return fetch(filename)\n    .then(response => response.arrayBuffer())\n    .then(buffer => WebAssembly.compile(buffer))\n    .then(module => {\n      imports.env = imports.env || {}\n      Object.assign(imports.env, {\n        memoryBase: 0,\n        tableBase: 0,\n        memory: new WebAssembly.Memory({ initial: 256, maximum: 256 }),\n        table: new WebAssembly.Table({ initial: 0, maximum: 0, element: 'anyfunc' })\n      })\n      return new WebAssembly.Instance(module, imports)\n    })\n}\n\nfunction loadJS (url, imports = {}) {\n  return fetch(url)\n    .then(response => response.text())\n    .then(code => new Function('imports', `return (${code})()`))\n    .then(factory => ({ exports: factory(imports) }))\n}\n"]}